{"version":3,"sources":["League.js","Leagues.js","Team.js","Teams.js","App.js","serviceWorker.js","index.js"],"names":["League","_ref","id","name","pcPrice","teams","react_default","a","createElement","className","style","marginBottom","src","concat","alt","Link","to","reduce","prev","currentTeam","isDone","length","Leagues","leagues","map","league","src_League","Object","assign","key","Team","reward","onToggle","width","height","parseInt","toLocaleString","type","checked","onChange","htmlFor","Teams","process","team","src_Team","localSbcData","localStorage","getItem","App","_useState","useState","JSON","parse","sbcData","_useState2","slicedToArray","sbcs","setSbcs","toggleIsDone","newState","newTeams","objectSpread","console","log","setItem","stringify","BrowserRouter","Route","exact","path","render","props","src_Leagues","src_Teams","arr","match","params","find","elem","Boolean","window","location","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c6d2b453.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst League = ({ id, name, pcPrice, teams }) => (\r\n    <div className=\"col-sm-6 col-lg-4\" style={{ marginBottom: \"30px\" }}>\r\n        <div className=\"card d-flex h-100\">\r\n            <img\r\n                className=\"card-img-top\"\r\n                src={`imgs/leagues/${id}.png`}\r\n                alt={`${name} logo`}\r\n            />\r\n            <div className=\"card-body d-flex flex-column justify-content-between\">\r\n                <h5 className=\"card-title\">{name}</h5>\r\n                <p>\r\n                    Estimated price on PC: &nbsp;\r\n                    <span className=\"badge badge-secondary\">{pcPrice}</span>\r\n                </p>\r\n                <Link className=\"btn btn-primary\" to={`/${id}`}>\r\n                    Go to teams\r\n                </Link>\r\n            </div>\r\n            <div className=\"card-footer text-muted\">\r\n                {teams.reduce(\r\n                    (prev, currentTeam) =>\r\n                        currentTeam.isDone ? prev + 1 : prev,\r\n                    0\r\n                )}{\" \"}\r\n                / {teams.length}\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default League;\r\n","import React from \"react\";\r\nimport League from \"./League\";\r\n\r\nconst Leagues = ({ leagues }) => (\r\n    <div className=\"container\">\r\n        <div className=\"row\">\r\n            {leagues.map(league => (\r\n                <League key={league.id} {...league}  />\r\n            ))}\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Leagues;\r\n","import React from \"react\";\r\n\r\nconst Team = ({ id, name, pcPrice, reward, isDone, onToggle }) => (\r\n    <li className={`list-group-item ${isDone ? \"done\" : \"\"}`}>\r\n        <div className=\"d-sm-flex\">\r\n            <div\r\n                className=\"mx-auto mx-sm-0 mb-3 mb-sm-0\"\r\n                style={{ width: \"150px\", height: \"150px\" }}\r\n            >\r\n                <img\r\n                    src={`imgs/teams/${id}.png`}\r\n                    alt={`${name} badge`}\r\n                    className=\"img-fluid d-block\"\r\n                />\r\n            </div>\r\n\r\n            <div className=\"text-center text-sm-left pl-sm-4 flex-grow-1 d-lg-flex flex-wrap\">\r\n                <div className=\"my-1 col-lg-6 d-lg-flex justify-content-center align-items-center\">\r\n                    <strong>{name}</strong>\r\n                </div>\r\n                <div className=\"my-1 col-lg-6 d-lg-flex justify-content-center align-items-center\">\r\n                    <span className=\"font-weight-bold\">\r\n                        {parseInt(pcPrice).toLocaleString()}\r\n                    </span>{\" \"}\r\n                    &nbsp;coins\r\n                </div>\r\n                <div className=\"my-1 col-lg-6 d-lg-flex justify-content-center align-items-center\">\r\n                    {reward}\r\n                </div>\r\n\r\n                <div className=\"my-1 col-lg-6 d-lg-flex justify-content-center align-items-center\">\r\n                    <div className=\"custom-control custom-checkbox\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            className=\"custom-control-input\"\r\n                            id={`check--${id}`}\r\n                            checked={isDone}\r\n                            onChange={() => onToggle(id)}\r\n                        />\r\n                        <label\r\n                            className=\"custom-control-label\"\r\n                            htmlFor={`check--${id}`}\r\n                        >\r\n                            Done\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </li>\r\n);\r\n\r\nexport default Team;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Team from \"./Team\";\r\n\r\nconst Teams = ({ teams, onToggle }) => (\r\n    <div className=\"container\">\r\n        <Link className=\"btn btn-primary mb-4 w-100\" to={process.env.PUBLIC_URL + \"/\"}>\r\n            Go back to leagues\r\n        </Link>\r\n        <ul className=\"list-group\">\r\n            {teams.map(team => (\r\n                <Team key={team.id} {...team} onToggle={onToggle} />\r\n            ))}\r\n        </ul>\r\n        <Link className=\"btn btn-primary mt-4 w-100\" to={process.env.PUBLIC_URL + \"/\"}>\r\n            Go back to leagues\r\n        </Link>\r\n    </div>\r\n);\r\n\r\nexport default Teams;\r\n","import React, { useState } from \"react\";\nimport sbcData from \"./sbc.json\";\nimport Leagues from \"./Leagues.js\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Teams from \"./Teams\";\n\nconst matchedTeams = (arr, id) => arr.find(elem => elem.id === id).teams;\nconst localSbcData = localStorage.getItem(\"sbcData\");\n\nconst App = () => {\n    const [sbcs, setSbcs] = useState(\n        !localSbcData ? sbcData : JSON.parse(localSbcData)\n    );\n\n    const toggleIsDone = id => {\n        const newState = sbcs.map(league => {\n            const newTeams = league.teams.map(team =>\n                team.id === id ? { ...team, isDone: !team.isDone } : team\n            );\n            const newLeague = { ...league, teams: newTeams };\n            return newLeague;\n        });\n\n        console.log(newState);\n\n        localStorage.setItem(\"sbcData\", JSON.stringify(newState));\n\n        setSbcs(newState);\n    };\n\n    return (\n        <Router>\n            <div className=\"my-4\">\n                <Route\n                    exact\n                    path={process.env.PUBLIC_URL + \"/\"}\n                    render={props => <Leagues {...props} leagues={sbcs} />}\n                />\n\n                <Route\n                    path={process.env.PUBLIC_URL + \"/:id\"}\n                    render={props => (\n                        <Teams\n                            {...props}\n                            teams={matchedTeams(sbcs, props.match.params.id)}\n                            onToggle={toggleIsDone}\n                        />\n                    )}\n                />\n            </div>\n        </Router>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}